type Attachment {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: String
  source: UploadFile
  step: Step
}

type AttachmentAggregator {
  count: Int
  totalCount: Int
}

type AttachmentConnection {
  values: [Attachment]
  groupBy: AttachmentGroupBy
  aggregate: AttachmentAggregator
}

type AttachmentConnection_id {
  key: ID
  connection: AttachmentConnection
}

type AttachmentConnectionCreatedAt {
  key: DateTime
  connection: AttachmentConnection
}

type AttachmentConnectionId {
  key: ID
  connection: AttachmentConnection
}

type AttachmentConnectionSource {
  key: ID
  connection: AttachmentConnection
}

type AttachmentConnectionStep {
  key: ID
  connection: AttachmentConnection
}

type AttachmentConnectionType {
  key: String
  connection: AttachmentConnection
}

type AttachmentConnectionUpdatedAt {
  key: DateTime
  connection: AttachmentConnection
}

type AttachmentGroupBy {
  _id: [AttachmentConnection_id]
  id: [AttachmentConnectionId]
  createdAt: [AttachmentConnectionCreatedAt]
  updatedAt: [AttachmentConnectionUpdatedAt]
  type: [AttachmentConnectionType]
  source: [AttachmentConnectionSource]
  step: [AttachmentConnectionStep]
}

input AttachmentInput {
  type: String
  source: ID
  step: ID
}

input createAttachmentInput {
  data: AttachmentInput
}

type createAttachmentPayload {
  attachment: Attachment
}

input createIndicatorInput {
  data: IndicatorInput
}

type createIndicatorPayload {
  indicator: Indicator
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSessionInput {
  data: SessionInput
}

type createSessionPayload {
  session: Session
}

input createStageInput {
  data: StageInput
}

type createStagePayload {
  stage: Stage
}

input createStepInput {
  data: StepInput
}

type createStepPayload {
  step: Step
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAttachmentInput {
  where: InputID
}

type deleteAttachmentPayload {
  attachment: Attachment
}

input deleteIndicatorInput {
  where: InputID
}

type deleteIndicatorPayload {
  indicator: Indicator
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSessionInput {
  where: InputID
}

type deleteSessionPayload {
  session: Session
}

input deleteStageInput {
  where: InputID
}

type deleteStagePayload {
  stage: Stage
}

input deleteStepInput {
  where: InputID
}

type deleteStepPayload {
  step: Step
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAttachmentInput {
  type: String
  source: ID
  step: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editIndicatorInput {
  title: String
  order: Int
  sessions: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSessionInput {
  title: String
  objective: String
  video: ID
  stages: [ID]
  order: Int
  indicator: ID
}

input editStageInput {
  order: Int
  title: String
  steps: [ID]
  session: ID
}

input editStepInput {
  content: String
  attachments: [ID]
  stage: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Indicator {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  order: Int
  sessions(sort: String, limit: Int, start: Int, where: JSON): [Session]
}

type IndicatorAggregator {
  count: Int
  totalCount: Int
  sum: IndicatorAggregatorSum
  avg: IndicatorAggregatorAvg
  min: IndicatorAggregatorMin
  max: IndicatorAggregatorMax
}

type IndicatorAggregatorAvg {
  order: Float
}

type IndicatorAggregatorMax {
  order: Float
}

type IndicatorAggregatorMin {
  order: Float
}

type IndicatorAggregatorSum {
  order: Float
}

type IndicatorConnection {
  values: [Indicator]
  groupBy: IndicatorGroupBy
  aggregate: IndicatorAggregator
}

type IndicatorConnection_id {
  key: ID
  connection: IndicatorConnection
}

type IndicatorConnectionCreatedAt {
  key: DateTime
  connection: IndicatorConnection
}

type IndicatorConnectionId {
  key: ID
  connection: IndicatorConnection
}

type IndicatorConnectionOrder {
  key: Int
  connection: IndicatorConnection
}

type IndicatorConnectionTitle {
  key: String
  connection: IndicatorConnection
}

type IndicatorConnectionUpdatedAt {
  key: DateTime
  connection: IndicatorConnection
}

type IndicatorGroupBy {
  _id: [IndicatorConnection_id]
  id: [IndicatorConnectionId]
  createdAt: [IndicatorConnectionCreatedAt]
  updatedAt: [IndicatorConnectionUpdatedAt]
  title: [IndicatorConnectionTitle]
  order: [IndicatorConnectionOrder]
}

input IndicatorInput {
  title: String
  order: Int
  sessions: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Attachment | createAttachmentPayload | updateAttachmentPayload | deleteAttachmentPayload | AttachmentConnection | AttachmentAggregator | AttachmentGroupBy | AttachmentConnection_id | AttachmentConnectionId | AttachmentConnectionCreatedAt | AttachmentConnectionUpdatedAt | AttachmentConnectionType | AttachmentConnectionSource | AttachmentConnectionStep | Indicator | createIndicatorPayload | updateIndicatorPayload | deleteIndicatorPayload | IndicatorConnection | IndicatorAggregator | IndicatorAggregatorSum | IndicatorAggregatorAvg | IndicatorAggregatorMin | IndicatorAggregatorMax | IndicatorGroupBy | IndicatorConnection_id | IndicatorConnectionId | IndicatorConnectionCreatedAt | IndicatorConnectionUpdatedAt | IndicatorConnectionTitle | IndicatorConnectionOrder | Session | createSessionPayload | updateSessionPayload | deleteSessionPayload | SessionConnection | SessionAggregator | SessionAggregatorSum | SessionAggregatorAvg | SessionAggregatorMin | SessionAggregatorMax | SessionGroupBy | SessionConnection_id | SessionConnectionId | SessionConnectionCreatedAt | SessionConnectionUpdatedAt | SessionConnectionTitle | SessionConnectionObjective | SessionConnectionVideo | SessionConnectionOrder | SessionConnectionIndicator | Stage | createStagePayload | updateStagePayload | deleteStagePayload | StageConnection | StageAggregator | StageAggregatorSum | StageAggregatorAvg | StageAggregatorMin | StageAggregatorMax | StageGroupBy | StageConnection_id | StageConnectionId | StageConnectionCreatedAt | StageConnectionUpdatedAt | StageConnectionOrder | StageConnectionTitle | StageConnectionSession | Step | createStepPayload | updateStepPayload | deleteStepPayload | StepConnection | StepAggregator | StepGroupBy | StepConnection_id | StepConnectionId | StepConnectionCreatedAt | StepConnectionUpdatedAt | StepConnectionContent | StepConnectionStage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createAttachment(input: createAttachmentInput): createAttachmentPayload
  updateAttachment(input: updateAttachmentInput): updateAttachmentPayload
  deleteAttachment(input: deleteAttachmentInput): deleteAttachmentPayload
  createIndicator(input: createIndicatorInput): createIndicatorPayload
  updateIndicator(input: updateIndicatorInput): updateIndicatorPayload
  deleteIndicator(input: deleteIndicatorInput): deleteIndicatorPayload
  createSession(input: createSessionInput): createSessionPayload
  updateSession(input: updateSessionInput): updateSessionPayload
  deleteSession(input: deleteSessionInput): deleteSessionPayload
  createStage(input: createStageInput): createStagePayload
  updateStage(input: updateStageInput): updateStagePayload
  deleteStage(input: deleteStageInput): deleteStagePayload
  createStep(input: createStepInput): createStepPayload
  updateStep(input: updateStepInput): updateStepPayload
  deleteStep(input: deleteStepInput): deleteStepPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  attachment(id: ID!): Attachment
  attachments(sort: String, limit: Int, start: Int, where: JSON): [Attachment]
  attachmentsConnection(sort: String, limit: Int, start: Int, where: JSON): AttachmentConnection
  indicator(id: ID!): Indicator
  indicators(sort: String, limit: Int, start: Int, where: JSON): [Indicator]
  indicatorsConnection(sort: String, limit: Int, start: Int, where: JSON): IndicatorConnection
  session(id: ID!): Session
  sessions(sort: String, limit: Int, start: Int, where: JSON): [Session]
  sessionsConnection(sort: String, limit: Int, start: Int, where: JSON): SessionConnection
  stage(id: ID!): Stage
  stages(sort: String, limit: Int, start: Int, where: JSON): [Stage]
  stagesConnection(sort: String, limit: Int, start: Int, where: JSON): StageConnection
  step(id: ID!): Step
  steps(sort: String, limit: Int, start: Int, where: JSON): [Step]
  stepsConnection(sort: String, limit: Int, start: Int, where: JSON): StepConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Session {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  objective: String
  video: UploadFile
  order: Int
  indicator: Indicator
  stages(sort: String, limit: Int, start: Int, where: JSON): [Stage]
}

type SessionAggregator {
  count: Int
  totalCount: Int
  sum: SessionAggregatorSum
  avg: SessionAggregatorAvg
  min: SessionAggregatorMin
  max: SessionAggregatorMax
}

type SessionAggregatorAvg {
  order: Float
}

type SessionAggregatorMax {
  order: Float
}

type SessionAggregatorMin {
  order: Float
}

type SessionAggregatorSum {
  order: Float
}

type SessionConnection {
  values: [Session]
  groupBy: SessionGroupBy
  aggregate: SessionAggregator
}

type SessionConnection_id {
  key: ID
  connection: SessionConnection
}

type SessionConnectionCreatedAt {
  key: DateTime
  connection: SessionConnection
}

type SessionConnectionId {
  key: ID
  connection: SessionConnection
}

type SessionConnectionIndicator {
  key: ID
  connection: SessionConnection
}

type SessionConnectionObjective {
  key: String
  connection: SessionConnection
}

type SessionConnectionOrder {
  key: Int
  connection: SessionConnection
}

type SessionConnectionTitle {
  key: String
  connection: SessionConnection
}

type SessionConnectionUpdatedAt {
  key: DateTime
  connection: SessionConnection
}

type SessionConnectionVideo {
  key: ID
  connection: SessionConnection
}

type SessionGroupBy {
  _id: [SessionConnection_id]
  id: [SessionConnectionId]
  createdAt: [SessionConnectionCreatedAt]
  updatedAt: [SessionConnectionUpdatedAt]
  title: [SessionConnectionTitle]
  objective: [SessionConnectionObjective]
  video: [SessionConnectionVideo]
  order: [SessionConnectionOrder]
  indicator: [SessionConnectionIndicator]
}

input SessionInput {
  title: String
  objective: String
  video: ID
  stages: [ID]
  order: Int
  indicator: ID
}

type Stage {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Int
  title: String
  session: Session
  steps(sort: String, limit: Int, start: Int, where: JSON): [Step]
}

type StageAggregator {
  count: Int
  totalCount: Int
  sum: StageAggregatorSum
  avg: StageAggregatorAvg
  min: StageAggregatorMin
  max: StageAggregatorMax
}

type StageAggregatorAvg {
  order: Float
}

type StageAggregatorMax {
  order: Float
}

type StageAggregatorMin {
  order: Float
}

type StageAggregatorSum {
  order: Float
}

type StageConnection {
  values: [Stage]
  groupBy: StageGroupBy
  aggregate: StageAggregator
}

type StageConnection_id {
  key: ID
  connection: StageConnection
}

type StageConnectionCreatedAt {
  key: DateTime
  connection: StageConnection
}

type StageConnectionId {
  key: ID
  connection: StageConnection
}

type StageConnectionOrder {
  key: Int
  connection: StageConnection
}

type StageConnectionSession {
  key: ID
  connection: StageConnection
}

type StageConnectionTitle {
  key: String
  connection: StageConnection
}

type StageConnectionUpdatedAt {
  key: DateTime
  connection: StageConnection
}

type StageGroupBy {
  _id: [StageConnection_id]
  id: [StageConnectionId]
  createdAt: [StageConnectionCreatedAt]
  updatedAt: [StageConnectionUpdatedAt]
  order: [StageConnectionOrder]
  title: [StageConnectionTitle]
  session: [StageConnectionSession]
}

input StageInput {
  order: Int
  title: String
  steps: [ID]
  session: ID
}

type Step {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String
  stage: Stage
  attachments(sort: String, limit: Int, start: Int, where: JSON): [Attachment]
}

type StepAggregator {
  count: Int
  totalCount: Int
}

type StepConnection {
  values: [Step]
  groupBy: StepGroupBy
  aggregate: StepAggregator
}

type StepConnection_id {
  key: ID
  connection: StepConnection
}

type StepConnectionContent {
  key: String
  connection: StepConnection
}

type StepConnectionCreatedAt {
  key: DateTime
  connection: StepConnection
}

type StepConnectionId {
  key: ID
  connection: StepConnection
}

type StepConnectionStage {
  key: ID
  connection: StepConnection
}

type StepConnectionUpdatedAt {
  key: DateTime
  connection: StepConnection
}

type StepGroupBy {
  _id: [StepConnection_id]
  id: [StepConnectionId]
  createdAt: [StepConnectionCreatedAt]
  updatedAt: [StepConnectionUpdatedAt]
  content: [StepConnectionContent]
  stage: [StepConnectionStage]
}

input StepInput {
  content: String
  attachments: [ID]
  stage: ID
}

input updateAttachmentInput {
  where: InputID
  data: editAttachmentInput
}

type updateAttachmentPayload {
  attachment: Attachment
}

input updateIndicatorInput {
  where: InputID
  data: editIndicatorInput
}

type updateIndicatorPayload {
  indicator: Indicator
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSessionInput {
  where: InputID
  data: editSessionInput
}

type updateSessionPayload {
  session: Session
}

input updateStageInput {
  where: InputID
  data: editStageInput
}

type updateStagePayload {
  stage: Stage
}

input updateStepInput {
  where: InputID
  data: editStepInput
}

type updateStepPayload {
  step: Step
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
